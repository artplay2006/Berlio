@model dynamic
@{
    var typeOfModel = Model.GetType().ToString();
}

<div class="productcontent">
    <div class="maininfoproduct">
        <img src="~/images/@(Model.Image ?? "equipments.png")">
        <div class="product-info">
            <h4>@Html.Raw(Model.Name)</h4>
            <p style="background-color: #e9ecef; padding: 15px; border-radius: 8px;">@Html.Raw(Model.ShortDescription)</p>
            @if (Model.GetType() != typeof(BerlioWeb.Models.Program))
            {
                <button class="product-button" type="button" onclick="@(Model.Countavailability > 0 ? "openOrderModal()" : "void(0)")"
                style="@(Model.Countavailability > 0 ? "" : "background-color: #95a5a6; cursor: not-allowed; opacity: 0.6;")">
                    Заказать</button>
            }
            else
            {
                <button class="product-button" type="button" onclick="openOrderModal()">Заказать</button>
            }
        </div>
    </div>

    @if (Model.GetType() != typeof(BerlioWeb.Models.Program))
    {
        <div style="margin: 0 0 1.25vw; text-align: left;">

            <div style="@(Model.Countavailability > 0 ? "background-color: #2ecc71; color: #27ae60;" : "background-color: #e74c3c; color: #c0392b;") padding: 5px; border-radius: 0 0 5px 5px; display: inline-block;">
                <i class="@(Model.Countavailability > 0 ? "fas fa-check-circle" : "fas fa-times-circle")" style="margin:0 5px; color: black"><b> @(Model.Countavailability > 0 ? "Есть в наличии" : "Нет в наличии")</b></i>
               
            </div>
        </div>
    }

    <div style="background-color: white; padding: 20px; border-radius: 10px;">
        @* margin: 2.5vw 0 0; *@
        <h6 style="font-size: 1vw;">Описание:</h6>
        <p style="font-size: 0.83vw; background-color: #e9ecef; padding: 15px; border-radius: 8px;">
            @Html.Raw(Model.LongDescription)
        </p>
    </div>

    @* <div style="margin:2.5vw 0 0; background-color: white; border-radius: 10px; padding: 20px;">
        <h6 style="font-size: 1vw;">Отзывы:</h6>
        <div class="comment">
            <div class="comment-details">
                <h6 style="font-size: 1vw;">Артемий а р т е м и й</h6>
                <div class="rating">
                    <span style="font-size: 1vw; color:orange">★★★★★</span>
                </div>
                <p style="width: 70%; font-size: 0.83vw;">Все супер, просто замечательно!</p>
                <p style="font-size: 0.83vw;">Дата</p>
            </div>
        </div>
    </div> *@
</div>

<!-- Модальное окно заказа -->
<div id="orderModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h3>Форма заказа</h3>
        @if (typeOfModel == "BerlioWeb.Models.Program")
        {
            <p>Напишите реквизиты своей банковской карты ниже</p>
            <form id="orderForm" onsubmit="submitOrderForm(event)">
                <!-- Добавьте эти скрытые поля -->
                <input type="hidden" id="productId" value="@Model.Id" />
                <input type="hidden" id="productType" value="Program" />
                <div class="form-group">
                    <label for="cardNumber">Номер карты:</label>
                    <input type="text"
                           class="form-control"
                           id="cardNumber"
                           name="cardNumber"
                           required
                           placeholder="XXXX XXXX XXXX XXXX"
                           pattern="(?:\d{4}\s?){4}"
                           maxlength="19"
                           oninput="formatCardNumber(this)"
                           onblur="validateCardNumber(this)">

                    <div class="invalid-feedback">Введите корректный номер карты (16 цифр)</div>
                </div>
                <div class="form-group">
                    <label for="securityCode">Код безопасности:</label>
                    <input class="form-control" type="text" id="securityCode" name="securityCode" required placeholder="CVC/CVV"
                           maxlength="3" pattern="\d{3}" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 3);"
                           onblur="if(this.value.length !== 3) this.value = '';">
                </div>
                <div class="form-group">
                    <label for="expiryDate">Срок карты:</label>
                    <input class="form-control" type="text" id="expiryDate" name="expiryDate" placeholder="MM/YY">
                </div>
                <div class="form-group">
                    <label for="cardHolder">Имя владельца карты:</label>
                    <input class="form-control" type="text" id="cardHolder" name="cardHolder">
                </div>
                <button type="submit" class="submit-btn">Отправить заявку</button>
            </form>
        }
        else
        {
            <form id="orderForm" onsubmit="submitOrderForm(event)">
                <input type="hidden" id="productId" value="@Model.Id" />
                <input type="hidden" id="productType" value="Equipment" />
                <div class="form-group">
                    <label for="cardNumber">Номер карты:</label>
                    <input type="text"
                           class="form-control"
                           id="cardNumber"
                           name="cardNumber"
                           required
                           placeholder="XXXX XXXX XXXX XXXX"
                           pattern="(?:\d{4}\s?){4}"
                           maxlength="19"
                           oninput="formatCardNumber(this)"
                           onblur="validateCardNumber(this)">
                </div>
                <div class="form-group">
                    <label for="securityCode">Код безопасности:</label>
                    <input class ="form-control" type="text" id="securityCode" name="securityCode" required placeholder="CVC/CVV"
                           maxlength="3" pattern="\d{3}" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 3);"
                           onblur="if(this.value.length !== 3) this.value = '';">
                </div>
                <div class="form-group">
                    <label for="expiryDate">Срок карты:</label>
                    <input class="form-control" type="text" id="expiryDate" name="expiryDate" placeholder="MM/YY">
                </div>
                <div class="form-group">
                    <label for="cardHolder">Имя владельца карты:</label>
                    <input class="form-control" type="text" id="cardHolder" name="cardHolder">
                </div>
                <div class="form-group">
                    <label for="cardHolder">Количество:</label>
                    <input class="form-control" type="number"
                           id="countEquipment"
                           name="countEquipment"
                           min="1"
                           oninput="this.value = Math.abs(this.value)">
                </div>
                <div class="form-group">
                    <label for="cardHolder">Адрес доставки:</label>
                    <input class="form-control" type="text" id="addressDelivery" name="addressDelivery">
                </div>
                <div class="form-group">
                    <label for="cardHolder">Время доставки:</label>
                    <input class="form-control"
                           type="datetime-local"
                           id="timeDelivery"
                           name="timeDelivery"
                           min=""
                           required>
                </div>
                <button type="submit" class="submit-btn">Отправить заявку</button>
            </form>
        }
    </div>
</div>

<!-- Модальное окно авторизации -->
<div id="authWarningModal" class="modal" style="display: none;">
    <div class="modal-content" style="max-width: 400px; text-align: center;">
        <h3>Требуется авторизация</h3>
        <p>Для оформления заказа необходимо войти в систему</p>
        <div style="margin-top: 1.5rem; display: flex; justify-content: center; gap: 1rem;">
            <button onclick="redirectToAuth()" class="auth-btn auth-btn-login">Войти</button>
            <button onclick="closeAuthWarning()" class="auth-btn auth-btn-cancel">Отмена</button>
        </div>
    </div>
</div>

<style>
    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        animation: slideIn 0.15s ease-out;
        transition: opacity 0.15s;
    }

    .success-message {
        background: #d4edda;
        color: #155724;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        animation: slideIn 0.15s ease-out;
        transition: opacity 0.15s;
    }

    .error-content, .success-content {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .error-content i {
            color: #dc3545;
            font-size: 1.2em;
        }

        .success-content i {
            color: #28a745;
            font-size: 1.2em;
        }

    .error-close, .success-close {
        background: none;
        border: none;
        color: inherit;
        cursor: pointer;
        margin-left: auto;
        padding: 0 5px;
    }
    /* Стили модального окна */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: 10% auto;
        padding: 25px;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        animation: modalopen 0.4s;
    }

    @@keyframes modalopen {
        from {
            opacity: 0;
            transform: translateY(-50px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover {
            color: #333;
        }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

    .submit-btn {
        background-color: #4CAF50;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
    }

        .submit-btn:hover {
            background-color: #45a049;
        }

    .auth-btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

    .auth-btn-login {
        background-color: #4CAF50;
        color: white;
    }

    .auth-btn-cancel {
        background-color: #f44336;
        color: white;
    }
</style>

<script>
        document.addEventListener('DOMContentLoaded', function() {
        const deliveryInput = document.getElementById('timeDelivery');

        // Устанавливаем минимальную дату как текущую
        const now = new Date();
        // Форматируем дату в нужный для input формат (YYYY-MM-DDTHH:MM)
        const minDate = new Date(now.getTime() - now.getTimezoneOffset() * 60000)
                        .toISOString()
                        .slice(0, 16);

        deliveryInput.min = minDate;

        // Дополнительная валидация при изменении
        deliveryInput.addEventListener('change', function() {
            const selectedDate = new Date(this.value);
            if (selectedDate < now) {
                this.value = minDate;
                showError('Нельзя выбрать дату в прошлом');
            }
        });
    });
        function formatCardNumber(input) {
        // Удаляем все нецифровые символы
        let value = input.value.replace(/\D/g, '');

        // Добавляем пробелы после каждых 4 цифр
        value = value.replace(/(\d{4})(?=\d)/g, '$1 ');

        // Обрезаем до 16 цифр (19 символов с пробелами)
        if (value.length > 19) {
            value = value.substring(0, 19);
        }

        input.value = value;
    }

    function validateCardNumber(input) {
        // Проверяем, что введено ровно 16 цифр
        const digitsOnly = input.value.replace(/\D/g, '');
        if (digitsOnly.length !== 16) {
            input.setCustomValidity('Номер карты должен содержать 16 цифр');
        } else {
            input.setCustomValidity('');
        }
    }
    // Функция для получения куки по имени
    function getCookie(name) {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [cookieName, cookieValue] = cookie.trim().split('=');
            if (cookieName === name) return cookieValue;
        }
        return null;
    }

        // На клиенте
    async function openOrderModal() {
        try {
            const response = await fetch('/api/auth/check');
            if (!response.ok) throw new Error('Auth check failed');

            const { isAuthenticated } = await response.json();

            if (!isAuthenticated) {
                showAuthWarningModal();
                return;
            }

            document.getElementById('orderModal').style.display = 'block';
        } catch (error) {
            console.error('Auth check error:', error);
            showAuthWarningModal();
        }
    }

    function showAuthWarningModal() {
        document.getElementById('authWarningModal').style.display = 'block';
        document.body.style.overflow = 'hidden';
    }

    function redirectToAuth() {
        window.location.href = 'https://localhost:7224/Account/Authorization';
    }

    function closeAuthWarning() {
        document.getElementById('authWarningModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    // Закрытие модального окна заказа
    function closeModal() {
        document.getElementById('orderModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    // Закрытие при клике вне окна
    window.onclick = function(event) {
        if (event.target.classList.contains('modal')) {
            closeModal();
            closeAuthWarning();
        }
    }

    // Обработка формы
    // document.getElementById('orderForm').addEventListener('submit', function(e) {
    //     e.preventDefault();

    //     // Здесь можно добавить AJAX-отправку формы
    //     alert('Заявка отправлена! Мы свяжемся с вами в ближайшее время.');
    //     closeModal();
    // });
        async function submitOrderForm(event) {
        event.preventDefault();

        // Получаем значения из формы
        const productId = document.getElementById('productId').value;
        const productType = document.getElementById('productType').value;
        const count = productType === 'Program' ? 1 : document.getElementById('countEquipment').value;

        try {
            const response = await fetch('/Product/ProcessOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    Idproduct: productId,
                    Type: productType,
                    Count: count,
                    Finished: productType==='Equipment'?false:true,
                    // Client будет установлен на сервере
                })
            });

            const result = await response.json();

            if (response.ok) {
                // вот вызов функции уведомления о успешном заказе
                showSuccess(productType=='Equipment'?'Заказ успешно оформлен':'Программа успешно преобретена');
                closeModal();
            } else {
                showError('Ошибка при оформлении заказа: ' + result.message);
            }

            if(productType=='Equipment'){

                const response2 = await fetch('/Product/CreateDelivery', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    Addressdelivery: document.getElementById('addressDelivery').value,
                    Timedelivery: document.getElementById('timeDelivery').value,
                })
            });

            const result2 = await response2.json();

            if (response2.ok) {
                closeModal();
            } else {
                showError('Ошибка при оформлении заказа: ' + result2.message);
            }
            }
        } catch (error) {
            console.error('Ошибка:', error);
            showError('Произошла ошибка при отправке формы');
        }
    }
    function showSuccess(message) {
            let successContainer = document.getElementById('successContainer');

            if (!successContainer) {
                successContainer = document.createElement('div');
                successContainer.id = 'successContainer';
                successContainer.style.position = 'fixed';
                successContainer.style.top = '20px';
                successContainer.style.right = '20px';
                successContainer.style.zIndex = '10000';
                document.body.appendChild(successContainer);
            }

            const successElement = document.createElement('div');
            successElement.className = 'success-message';
            successElement.innerHTML = `
                <div class="success-content">
                    <i class="fas fa-check-circle"></i>
                    <span>${message}</span>
                    <button class="success-close" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;

            successContainer.appendChild(successElement);
            successContainer.style.display = 'block';

            // Автоматическое скрытие через 3 секунды
            setTimeout(() => {
                successElement.style.opacity = '0';
                setTimeout(() => successElement.remove(), 300);
            }, 3000);
        }
            function showError(message) {
            let errorContainer = document.getElementById('errorContainer');

            if (!errorContainer) {
                errorContainer = document.createElement('div');
                errorContainer.id = 'errorContainer';
                errorContainer.style.position = 'fixed';
                errorContainer.style.top = '20px';
                errorContainer.style.right = '20px';
                errorContainer.style.zIndex = '10000';
                document.body.appendChild(errorContainer);
            }

            const errorElement = document.createElement('div');
            errorElement.className = 'error-message';
            errorElement.innerHTML = `
                <div class="error-content">
                    <i class="fas fa-exclamation-circle"></i>
                    <span>${message}</span>
                    <button class="error-close" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;

            errorContainer.appendChild(errorElement);
            errorContainer.style.display = 'block';

            // Автоматическое скрытие через 5 секунд
            setTimeout(() => {
                errorElement.style.opacity = '0';
                setTimeout(() => errorElement.remove(), 300);
            }, 5000);
        }
    // Маска для номера карты
    document.getElementById('cardNumber').addEventListener('input', function(e) {
        this.value = this.value.replace(/\D/g, '')
            .replace(/(\d{4})(?=\d)/g, '$1 ');
    });

    // Маска для срока действия
    document.getElementById('expiryDate').addEventListener('input', function(e) {
        this.value = this.value.replace(/\D/g, '')
            .replace(/(\d{2})(?=\d)/g, '$1/')
            .substring(0, 5);
    });
</script>